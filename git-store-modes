#!/usr/bin/env bash

MODEFILE=".git-mode-cache"
USAGE="Usage:
    ${0##*/} save OPTIONS
or  ${0##*/} restore OPTIONS

Save or restore permissions of files in a git repository.

Options:
  -f file:  Save permissions to (or restore from) file (default: $MODEFILE)
  -h:       Show this help and exit.
"

function go_worktree_root() {
  local CDUP=$(git rev-parse --show-cdup)
  local ERR=$?

  if [[ $ERR -ne 0 ]]; then
    exit $ERR;
  fi

  if [[ "$CDUP" ]]; then
    pushd "$CDUP" &> /dev/null \
      && trap 'popd &> /dev/null' EXIT \
      || exit $?
  fi
}

function files_ancestors() {
  local FPATH

  while read -r -d '' FPATH; do
    while [[ "$FPATH" && "$FPATH" != [./] ]]; do
      printf "%s\0" "$FPATH"
      FPATH=$(dirname "$FPATH")
    done
  done
}

function get_modes() {
  local -a STATOPTS=(--printf '%a\t%n\0')
  local STAT

  if stat --printf '' . &> /dev/null; then
    STAT=stat
  else
    STAT=gstat
  fi

  git ls-files -cz --full-name \
    | files_ancestors \
    | sort -zu \
    | xargs -0 "$STAT" "${STATOPTS[@]}"
}

function restore_modes() {
  local MODE
  local FILENAME
  local ORIG_IFS="$IFS"

  IFS='\t'

  while read -r -d '' MODE FILENAME; do
    chmod "$MODE" "$FILENAME"
  done

  IFS="$ORIG_IFS"
}

if [[ "$1" = "save" ]]; then
  MODE="SAVE"
elif [[ "$1" = "restore" ]]; then
  MODE="RESTORE"
else
  echo "$USAGE" >&2
  exit 1
fi

shift
set -o nounset

while getopts 'f:h' OPT; do
  case "$OPT" in
    'f')
      MODEFILE=$OPTARG
      ;;
    'h')
      echo "$USAGE"
      exit
      ;;
    *)
      echo "$USAGE" >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [[ $# -gt 0 ]]; then
  echo "Unexpected arguments: $@" >&2
  echo "$USAGE" >&2
  exit 1
fi

go_worktree_root

case "$MODE" in
  "SAVE")
    get_modes > "$MODEFILE"
    ;;

  "RESTORE")
    restore_modes < "$MODEFILE"
    ;;
esac
